        #
# # ################################################################ #

# # A list of all built-in modifier and literal keywords can
# # be found at https://github.com/koekeishiya/skhd/issues/1
# #
# # A hotkey is written according to the following rules:
# #
# #   hotkey       = <mode> '<' <action> | <action>
# #
# #   mode         = 'name of mode' | <mode> ',' <mode>
# #
# #   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
# #                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
# #                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
# #
# #   keysym       = <mod> '-' <key> | <key>
# #
# #   mod          = 'modifier keyword' | <mod> '+' <mod>
# #
# #   key          = <literal> | <keycode>
# #
# #   literal      = 'single letter or built-in keyword'
# #
# #   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
# #
# #   proc_map_lst = * <proc_map>
# #
# #   proc_map     = <string> ':' <command> | <string>     '~' |
# #                  '*'      ':' <command> | '*'          '~'
# #
# #   string       = '"' 'sequence of characters' '"'
# #
# #   command      = command is executed through '$SHELL -c' and
# #                  follows valid shell syntax. if the $SHELL environment
# #                  variable is not set, it will default to '/bin/bash'.
# #                  when bash is used, the ';' delimeter can be specified
# #                  to chain commands.
# #
# #                  to allow a command to extend into multiple lines,
# #                  prepend '\' at the end of the previous line.
# #
# #                  an EOL character signifies the end of the bind.
# #
# #   ->           = keypress is not consumed by skhd
# #
# #   *            = matches every application not specified in <proc_map_lst>
# #
# #   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
# #
# # A mode is declared according to the following rules:
# #
# #   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
# #               '::' <name> '@'               | '::' <name>
# #
# #   name      = desired name for this mode,
# #
# #   @         = capture keypresses regardless of being bound to an action
# #
# #   command   = command is executed through '$SHELL -c' and
# #               follows valid shell syntax. if the $SHELL environment
# #               variable is not set, it will default to '/bin/bash'.
# #               when bash is used, the ';' delimeter can be specified
# #               to chain commands.
# #
# #               to allow a command to extend into multiple lines,
# #               prepend '\' at the end of the previous line.
# #
# #               an EOL character signifies the end of the bind.

# # ############################################################### #
# # THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# # TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# # A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# # ############################################################### #

# # focus window
# # alt - h : yabai -m window --focus west

# # swap managed window
# # shift + alt - h : yabai -m window --swap north

# # move managed window
# # shift + cmd - h : yabai -m window --warp east

# # balance size of windows
# # shift + alt - 0 : yabai -m space --balance

# # make floating window fill screen
# # shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# # make floating window fill left-half of screen
# # shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# # create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# # shift + cmd - n : yabai -m space --create && \
# #                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
# #                   yabai -m window --space "${index}" && \
# #                   yabai -m space --focus "${index}"

# # fast focus desktop
# # cmd + alt - x : yabai -m space --focus recent
# # cmd + alt - 1 : yabai -m space --focus 1

# # send window to desktop and follow focus
# # shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# # shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# # focus monitor
# # ctrl + alt - z  : yabai -m display --focus prev
# # ctrl + alt - 3  : yabai -m display --focus 3

# # send window to monitor and follow focus
# # ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# # ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# # move floating window
# # shift + ctrl - a : yabai -m window --move rel:-20:0
# # shift + ctrl - s : yabai -m window --move rel:0:20

# # increase window size
# # shift + alt - a : yabai -m window --resize left:-20:0
# # shift + alt - w : yabai -m window --resize top:0:-20

# # decrease window size
# # shift + cmd - s : yabai -m window --resize bottom:0:-20
# # shift + cmd - w : yabai -m window --resize top:0:20

# # set insertion point in focused container
# # ctrl + alt - h : yabai -m window --insert west

# # toggle window zoom
# # alt - d : yabai -m window --toggle zoom-parent

# # toggle window split type
# # alt - e : yabai -m window --toggle split

# # float / unfloat window and center on screen
# # alt - t : yabai -m window --toggle float --grid 4:4:1:1:2:2

# # toggle sticky(+float), picture-in-picture
# # alt - p : yabai -m window --toggle sticky --toggle pip
# alt - h : yabai -m window --focus west
# alt - j : yabai -m window --focus south

# alt - k : yabai -m window --focus north
# alt - l : yabai -m window --focus east
# alt - n : yabai -m window --focus recent

# # alt - t : yabai -m window --toggle float --grid 6:6:1:1:4:4
# # 网格格式是 <rows>:<cols>:<start-x>:<start-y>:<width>:<height> ，其中rows和tags是总共有多少行和列，start-x和start-y是行和列的起始索引，width和height是窗口跨越多少行和列。
# ctrl + alt - t : yabai -m window --toggle float --grid 10:10:1:1:8:8
# alt - g : yabai -m window --toggle zoom-fullscreen

# ctrl + alt - h : yabai -m window --swap west
# ctrl + alt - j : yabai -m window --swap south
# ctrl + alt - k : yabai -m window --swap north
# ctrl + alt - l : yabai -m window --swap east

# shift + alt - h : yabai -m window --warp west
# shift + alt - j : yabai -m window --warp south
# shift + alt - k : yabai -m window --warp north
# shift + alt - l : yabai -m window --warp east

# # ctrl + alt - x : yabai -m space --mirror x-axis
# # ctrl + alt - y : yabai -m space --mirror y-axis

# # increase window size
# ctrl + shift + alt - h : yabai -m window --resize right:-50:0
# ctrl + shift + alt - l : yabai -m window --resize right:+50:0
# ctrl + shift + alt - j : yabai -m window --resize bottom:0:+50
# ctrl + shift + alt - k : yabai -m window --resize bottom:0:-50


# # space
ctrl + alt - 1 : yabai -m window --space 1
ctrl + alt - 2 : yabai -m window --space 2
ctrl + alt - 3 : yabai -m window --space 3
ctrl + alt - 4 : yabai -m window --space 4
ctrl + alt - 5 : yabai -m window --space 5
ctrl + alt - 6 : yabai -m window --space 6
ctrl + alt - 7 : yabai -m window --space 7
ctrl + alt - 8 : yabai -m window --space 8
ctrl + alt - 9 : yabai -m window --space 9
ctrl + alt - 0 : yabai -m window --space 10

alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9
alt - 0 : yabai -m space --focus 10

# cmd - f : ~/yabai-window-manager.sh
